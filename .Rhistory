######### Metropolis algorithm ################
library(createPosterior)
######### Metropolis algorithm ################
install.packages("BayesTools")
######### Metropolis algorithm ################
install.packages("BayesianTools")
library(createPosterior)
proposalfunction <- function(param){
return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}
run_metropolis_MCMC <- function(startvalue, iterations){
chain = array(dim = c(iterations+1,3))
chain[1,] = startvalue
for (i in 1:iterations){
proposal = proposalfunction(chain[i,])
probab = exp(posterior(proposal) - posterior(chain[i,]))
if (runif(1) < probab){
chain[i+1,] = proposal
}else{
chain[i+1,] = chain[i,]
}
}
return(chain)
}
startvalue = c(4,0,10)
chain = run_metropolis_MCMC(startvalue, 10000)
install.packages("posterior", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(posterior)
# install.packages("remotes")
remotes::install_github("stan-dev/posterior")
remotes::install_github("stan-dev/posterior")
library("posterior")
library(bayestestR)
library(insight)
library(see)
library(rstanarm)
library(ggplot2)
mh_sampler <- function(dens, start = 0, nreps = 1000, prop_sd = 1, ...){
theta <- numeric(nreps)
theta[1] <- start
for (i in 2:nreps){
theta_star <- rnorm(1, mean = theta[i - 1], sd = prop_sd)
alpha = dens(theta_star, ...) / dens(theta[i - 1], ...)
if (runif(1) < alpha) theta[i] <- theta_star
else theta[i] <- theta[i - 1]
}
return(theta)
}
plot(theta)
plot(mh_sampler())
