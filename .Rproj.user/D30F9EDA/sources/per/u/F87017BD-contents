delta <- 0.5
N <- 1000
x <- numeric(N)
x[1] <-0
set.seed(2020-15-09)
for(i in 2:N) {
  eps <- runif(1, -delta, delta)
  y <- x[i-1] + eps
  alpha <- min(dnorm(y, log = TRUE) - dnorm(x[i-1], log = TRUE), 0)
  u <- runif(1, 0, 1)
  if(log(u) <= alpha)
    x[i] <- y
  else
    x[i] <- x[i-1]
}
summary(x)

hist(x)


######### Metropolis algorithm ################
install.packages("BayesianTools")
library(createPosterior)
proposalfunction <- function(param){
  return(rnorm(3,mean = param, sd= c(0.1,0.5,0.3)))
}

run_metropolis_MCMC <- function(startvalue, iterations){
  chain = array(dim = c(iterations+1,3))
  chain[1,] = startvalue
  for (i in 1:iterations){
    proposal = proposalfunction(chain[i,])
    
    probab = exp(posterior(proposal) - posterior(chain[i,]))
    if (runif(1) < probab){
      chain[i+1,] = proposal
    }else{
      chain[i+1,] = chain[i,]
    }
  }
  return(chain)
}

startvalue = c(4,0,10)
chain = run_metropolis_MCMC(startvalue, 10000)

burnIn = 5000
acceptance = 1-mean(duplicated(chain[-(1:burnIn),]))


mh_sampler <- function(dens, start = 0, nreps = 1000, prop_sd = 1, ...){
  theta <- numeric(nreps)
  theta[1] <- start
  
  for (i in 2:nreps){
    theta_star <- rnorm(1, mean = theta[i - 1], sd = prop_sd)
    alpha = dens(theta_star, ...) / dens(theta[i - 1], ...)
    
    if (runif(1) < alpha) theta[i] <- theta_star
    else theta[i] <- theta[i - 1]
  }
  
  return(theta)
}
